// <auto-generated />
using System;
using Botvex.DB.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Botvex.DB.Migrations
{
    [DbContext(typeof(BotvexContext))]
    [Migration("20231226201422_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Botvex.DB.Models.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("float");

                    b.Property<double?>("Ar")
                        .HasColumnType("float");

                    b.Property<int?>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<float?>("Bpm")
                        .HasColumnType("real");

                    b.Property<string>("Checksum")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Convert")
                        .HasColumnType("int");

                    b.Property<int?>("Count_circles")
                        .HasColumnType("int");

                    b.Property<int?>("Count_sliders")
                        .HasColumnType("int");

                    b.Property<int?>("Count_spinners")
                        .HasColumnType("int");

                    b.Property<double?>("Cs")
                        .HasColumnType("float");

                    b.Property<string>("Deleted_at")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Difficulty_Rating")
                        .HasColumnType("float");

                    b.Property<double?>("Drain")
                        .HasColumnType("float");

                    b.Property<int?>("Hit_length")
                        .HasColumnType("int");

                    b.Property<int>("Is_scoreable")
                        .HasColumnType("int");

                    b.Property<string>("Last_updated")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Max_combo")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("Mode_int")
                        .HasColumnType("int");

                    b.Property<int?>("Passcount")
                        .HasColumnType("int");

                    b.Property<int?>("Playcount")
                        .HasColumnType("int");

                    b.Property<int?>("Ranked")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Total_Length")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_BeatmapId");

                    b.HasIndex("Beatmapset_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("beatmaps", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Artist_unicode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Favourite_count")
                        .HasColumnType("int");

                    b.Property<int?>("Has_favourited")
                        .HasColumnType("int");

                    b.Property<int>("Nsfw")
                        .HasColumnType("int");

                    b.Property<int?>("Offset")
                        .HasColumnType("int");

                    b.Property<int?>("Play_count")
                        .HasColumnType("int");

                    b.Property<string>("Preview_url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Spotlight")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title_unicode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Track_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Video")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Beatmapset_Id");

                    b.HasIndex("User_id");

                    b.ToTable("beatmapsets", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_GenreId");

                    b.HasIndex("Beatmapset_Id")
                        .IsUnique()
                        .HasFilter("[Beatmapset_Id] IS NOT NULL");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_LanguageId");

                    b.HasIndex("Beatmapset_Id")
                        .IsUnique()
                        .HasFilter("[Beatmapset_Id] IS NOT NULL");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Avatar_url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country_code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Default_group")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Is_active")
                        .HasColumnType("int");

                    b.Property<int>("Is_bot")
                        .HasColumnType("int");

                    b.Property<int>("Is_deleted")
                        .HasColumnType("int");

                    b.Property<int>("Is_online")
                        .HasColumnType("int");

                    b.Property<int>("Is_supporter")
                        .HasColumnType("int");

                    b.Property<string>("Last_visit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pm_friends_only")
                        .HasColumnType("int");

                    b.Property<string>("Profile_colour")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmap", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset", "Beatmapset")
                        .WithMany("Beatmaps")
                        .HasForeignKey("Beatmapset_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BeatmapToSet");

                    b.HasOne("Botvex.DB.Models.User", "User")
                        .WithMany("Beatmaps")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserToBeatmap");

                    b.Navigation("Beatmapset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset", b =>
                {
                    b.HasOne("Botvex.DB.Models.User", "User")
                        .WithMany("Beatmapsets")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserToBeatmapset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Botvex.DB.Models.Genre", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset", "Beatmapset")
                        .WithOne("Genre")
                        .HasForeignKey("Botvex.DB.Models.Genre", "Beatmapset_Id")
                        .HasConstraintName("FK_GenreToSet");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Botvex.DB.Models.Language", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset", "Beatmapset")
                        .WithOne("Language")
                        .HasForeignKey("Botvex.DB.Models.Language", "Beatmapset_Id")
                        .HasConstraintName("FK_LanguageToSet");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset", b =>
                {
                    b.Navigation("Beatmaps");

                    b.Navigation("Genre");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Botvex.DB.Models.User", b =>
                {
                    b.Navigation("Beatmaps");

                    b.Navigation("Beatmapsets");
                });
#pragma warning restore 612, 618
        }
    }
}
