// <auto-generated />
using System;
using Botvex.DB.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Botvex.DB.Migrations
{
    [DbContext(typeof(BotvexContext))]
    partial class BotvexContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Botvex.DB.Models.Beatmap.BeatmapExtended", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("Accuracy")
                        .HasColumnType("float");

                    b.Property<double>("Ar")
                        .HasColumnType("float");

                    b.Property<int>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<float?>("Bpm")
                        .HasColumnType("real");

                    b.Property<string>("Checksum")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Convert")
                        .HasColumnType("int");

                    b.Property<int>("Count_circles")
                        .HasColumnType("int");

                    b.Property<int>("Count_sliders")
                        .HasColumnType("int");

                    b.Property<int>("Count_spinners")
                        .HasColumnType("int");

                    b.Property<double>("Cs")
                        .HasColumnType("float");

                    b.Property<string>("Deleted_at")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Difficulty_Rating")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Drain")
                        .HasColumnType("float");

                    b.Property<int>("Hit_length")
                        .HasColumnType("int");

                    b.Property<int>("Is_scoreable")
                        .HasColumnType("int");

                    b.Property<string>("Last_updated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Max_combo")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Mode_int")
                        .HasColumnType("int");

                    b.Property<int>("Passcount")
                        .HasColumnType("int");

                    b.Property<int>("Playcount")
                        .HasColumnType("int");

                    b.Property<int>("Ranked")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Total_Length")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_BeatmapId");

                    b.HasIndex("Beatmapset_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("beatmaps", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("BeatmapExtended");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Artist_unicode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Bpm")
                        .HasColumnType("real");

                    b.Property<bool>("Can_be_hyped")
                        .HasColumnType("bit");

                    b.Property<string>("Covers")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Deleted_at")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Discussion_enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Discussion_locked")
                        .HasColumnType("bit");

                    b.Property<int>("Favourite_count")
                        .HasColumnType("int");

                    b.Property<int?>("Has_favourited")
                        .HasColumnType("int");

                    b.Property<bool>("Is_scoreable")
                        .HasColumnType("bit");

                    b.Property<string>("Last_updated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Legacy_thread_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nsfw")
                        .HasColumnType("int");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<int>("Play_count")
                        .HasColumnType("int");

                    b.Property<string>("Preview_url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ranked")
                        .HasColumnType("int");

                    b.Property<string>("Ranked_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Spotlight")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Storyboard")
                        .HasColumnType("bit");

                    b.Property<string>("Submitted_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title_unicode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Track_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Video")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BeatmapsetId");

                    b.HasIndex("User_id");

                    b.ToTable("beatmapsets", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_GenreId");

                    b.HasIndex("Beatmapset_Id")
                        .IsUnique()
                        .HasFilter("[Beatmapset_Id] IS NOT NULL");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Beatmapset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_LanguageId");

                    b.HasIndex("Beatmapset_Id")
                        .IsUnique()
                        .HasFilter("[Beatmapset_Id] IS NOT NULL");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.User.UserExtended", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Avatar_url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BeatmapsetExtendedId")
                        .HasColumnType("int");

                    b.Property<string>("Country_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Default_group")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Is_active")
                        .HasColumnType("int");

                    b.Property<int>("Is_bot")
                        .HasColumnType("int");

                    b.Property<int>("Is_deleted")
                        .HasColumnType("int");

                    b.Property<int>("Is_online")
                        .HasColumnType("int");

                    b.Property<int>("Is_supporter")
                        .HasColumnType("int");

                    b.Property<string>("Last_visit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pm_friends_only")
                        .HasColumnType("int");

                    b.Property<string>("Profile_colour")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_UserId");

                    b.HasIndex("BeatmapsetExtendedId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmap.Convert", b =>
                {
                    b.HasBaseType("Botvex.DB.Models.Beatmap.BeatmapExtended");

                    b.Property<int?>("BeatmapsetExtendedId")
                        .HasColumnType("int");

                    b.HasIndex("BeatmapsetExtendedId");

                    b.HasDiscriminator().HasValue("Convert");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmap.BeatmapExtended", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", "Beatmapset")
                        .WithMany("Beatmaps")
                        .HasForeignKey("Beatmapset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BeatmapToSet");

                    b.HasOne("Botvex.DB.Models.User.UserExtended", "User")
                        .WithMany("Beatmaps")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserToBeatmap");

                    b.Navigation("Beatmapset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", b =>
                {
                    b.HasOne("Botvex.DB.Models.User.UserExtended", "User")
                        .WithMany("Beatmapsets")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserToBeatmapset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.Genre", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", "Beatmapset")
                        .WithOne("Genre")
                        .HasForeignKey("Botvex.DB.Models.Beatmapset.Genre", "Beatmapset_Id")
                        .HasConstraintName("FK_GenreToSet");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.Language", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", "Beatmapset")
                        .WithOne("Language")
                        .HasForeignKey("Botvex.DB.Models.Beatmapset.Language", "Beatmapset_Id")
                        .HasConstraintName("FK_LanguageToSet");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Botvex.DB.Models.User.UserExtended", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", null)
                        .WithMany("Related_users")
                        .HasForeignKey("BeatmapsetExtendedId");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmap.Convert", b =>
                {
                    b.HasOne("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", null)
                        .WithMany("Converts")
                        .HasForeignKey("BeatmapsetExtendedId");
                });

            modelBuilder.Entity("Botvex.DB.Models.Beatmapset.BeatmapsetExtended", b =>
                {
                    b.Navigation("Beatmaps");

                    b.Navigation("Converts");

                    b.Navigation("Genre");

                    b.Navigation("Language");

                    b.Navigation("Related_users");
                });

            modelBuilder.Entity("Botvex.DB.Models.User.UserExtended", b =>
                {
                    b.Navigation("Beatmaps");

                    b.Navigation("Beatmapsets");
                });
#pragma warning restore 612, 618
        }
    }
}
